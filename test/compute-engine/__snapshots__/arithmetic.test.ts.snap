// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
box       = ["Ln", 1.1]
N-auto    = 0.09531017980432486004395212328076509222060536530864419918523980816300101423588423283905750291303649307
N-mach    = 0.09531017980432493
`;

exports[` 2`] = `
box       = ["Ln", 1]
simplify  = 0
`;

exports[` 3`] = `
box       = ["Ln", 0]
simplify  = NaN
N-auto    = NegativeInfinity
`;

exports[` 4`] = `
box       = ["Ln", -1]
simplify  = ["Multiply", ["Complex", 0, 1], "Pi"]
evaluate  = ["Multiply", ["Complex", 0, 1], "Pi"]
N-auto    = ["Complex", 0, 3.141592653589793]
eval-big  = ["Ln", -1]
N-big     = NaN
eval-mach = ["Ln", -1]
eval-cplx = ["Multiply", ["Complex", 0, 1], "Pi"]
N-cplx    = ["Complex", 0, 3.141592653589793]
`;

exports[` 5`] = `
box       = ["Ln", "Pi"]
N-auto    = 1.144729885849400174143427351353058711647294812915311571513623071472137769884826079783623270275489708
N-mach    = 1.1447298858494002
`;

exports[` 6`] = `
box       = ["Ln", ["Complex", 1.1, 1.1]]
N-auto    = ["Complex", 0.4418837700842976, 0.7853981633974483]
N-big     = NaN
N-cplx    = ["Complex", 0.4418837700842976, 0.7853981633974483]
`;

exports[` 7`] = `
box       = ["Lb", 1.1]
canonical = ["Log", 1.1, 2]
N-auto    = 0.1375035237499349083290436172364027828384001326571874592580452499103958431113931368593515559275303336
N-mach    = 0.13750352374993502
`;

exports[` 8`] = `
box       = ["Lb", 1]
canonical = 0
`;

exports[` 9`] = `
box       = ["Lb", 0]
canonical = NaN
`;

exports[` 10`] = `
box       = ["Lb", -1]
canonical = ["Log", -1, 2]
simplify  = ["Multiply", ["Complex", 0, 1], "Pi"]
evaluate  = ["Multiply", ["Complex", 0, 1], "Pi"]
N-auto    = NaN
eval-big  = ["Log", -1, 2]
eval-mach = ["Log", -1, 2]
eval-cplx = ["Multiply", ["Complex", 0, 1], "Pi"]
`;

exports[` 11`] = `
box       = ["Lb", "Pi"]
canonical = ["Log", "Pi", 2]
N-auto    = 1.651496129472318798043279295108007335018476926763041529406788515488102963584541438960264792809854102
N-mach    = 1.651496129472319
`;

exports[` 12`] = `
box       = ["Lb", ["Complex", 1.1, 1.1]]
canonical = ["Log", ["Complex", 1.1, 1.1], 2]
N-auto    = ["Complex", 0.637503523749935, 1.1330900354567985]
N-big     = NaN
N-cplx    = ["Complex", 0.637503523749935, 1.1330900354567985]
`;

exports[` 13`] = `
box       = ["Lg", 1.1]
canonical = ["Log", 1.1]
evaluate  = ["Log", 1.1, 10]
N-auto    = 0.04139268515822504075
N-mach    = 0.04139268515822507
`;

exports[` 14`] = `
box       = ["Lg", 1]
canonical = ["Log", 1]
simplify  = 0
`;

exports[` 15`] = `
box       = ["Lg", 0]
canonical = ["Log", 0]
simplify  = NaN
N-auto    = NegativeInfinity
`;

exports[` 16`] = `
box       = ["Lg", -1]
canonical = ["Log", -1]
simplify  = ["Multiply", ["Complex", 0, 1], "Pi"]
evaluate  = ["Multiply", ["Complex", 0, 1], "Pi"]
N-auto    = ["Complex", 0, 1.3643763538418412]
eval-big  = ["Log", -1, 10]
N-big     = NaN
eval-mach = ["Log", -1, 10]
eval-cplx = ["Multiply", ["Complex", 0, 1], "Pi"]
N-cplx    = ["Complex", 0, 1.3643763538418412]
`;

exports[` 17`] = `
box       = ["Lg", "Pi"]
canonical = ["Log", "Pi"]
evaluate  = ["Log", "Pi", 10]
N-auto    = 0.49714987269413385435
N-mach    = 0.4971498726941338
`;

exports[` 18`] = `
box       = ["Lg", ["Complex", 1.1, 1.1]]
canonical = ["Log", ["Complex", 1.1, 1.1]]
simplify  = ["Log", ["Complex", 1.1, 1.1], 10]
N-auto    = ["Complex", 0.19190768299021566, 0.3410940884604603]
N-big     = NaN
N-cplx    = ["Complex", 0.19190768299021566, 0.3410940884604603]
`;

exports[` 19`] = `
box       = ["Log", 1.1]
evaluate  = ["Log", 1.1, 10]
N-auto    = 0.04139268515822504075
N-mach    = 0.04139268515822507
`;

exports[` 20`] = `
box       = ["Log", 1]
canonical = 0
`;

exports[` 21`] = `
box       = ["Log", 0]
canonical = NaN
`;

exports[` 22`] = `
box       = ["Log", -1]
simplify  = ["Multiply", ["Complex", 0, 1], "Pi"]
evaluate  = ["Multiply", ["Complex", 0, 1], "Pi"]
N-auto    = ["Complex", 0, 1.3643763538418412]
eval-big  = ["Log", -1, 10]
N-big     = NaN
eval-mach = ["Log", -1, 10]
eval-cplx = ["Multiply", ["Complex", 0, 1], "Pi"]
N-cplx    = ["Complex", 0, 1.3643763538418412]
`;

exports[` 23`] = `
box       = ["Log", "Pi"]
evaluate  = ["Log", "Pi", 10]
N-auto    = 0.49714987269413385435
N-mach    = 0.4971498726941338
`;

exports[` 24`] = `
box       = ["Log", ["Complex", 1.1, 1.1]]
simplify  = ["Log", ["Complex", 1.1, 1.1], 10]
N-auto    = ["Complex", 0.19190768299021566, 0.3410940884604603]
N-big     = NaN
N-cplx    = ["Complex", 0.19190768299021566, 0.3410940884604603]
`;

exports[` 25`] = `
box       = ["Log", 1.1, 5]
N-auto    = 0.0592195443315850221290952112200056755436885124798733012053765685506367399975214087509268239491525845
N-mach    = 0.05921954433158507
`;

exports[` 26`] = `
box       = ["Log", 1, 5]
canonical = 0
`;

exports[` 27`] = `
box       = ["Log", 0, 5]
canonical = NaN
`;

exports[` 28`] = `
box       = ["Log", -1, 5]
simplify  = ["Multiply", ["Complex", 0, 1], "Pi"]
evaluate  = ["Multiply", ["Complex", 0, 1], "Pi"]
N-auto    = NaN
eval-big  = ["Log", -1, 5]
eval-mach = ["Log", -1, 5]
eval-cplx = ["Multiply", ["Complex", 0, 1], "Pi"]
`;

exports[` 29`] = `
box       = ["Log", "Pi", 5]
N-auto    = 0.7112606687126689553318234336581786219261392136211221929090735692416944171350751485904266807833850798
N-mach    = 0.711260668712669
`;

exports[` 30`] = `
box       = ["Log", ["Complex", 1.1, 1.1], 5]
N-auto    = ["Complex", 0.2745578233682816, 0.48799531645779287]
N-big     = NaN
N-cplx    = ["Complex", 0.2745578233682816, 0.48799531645779287]
`;

exports[` 31`] = `
box       = ["Ln"]
canonical = ["Ln", ["Error", "'missing'"]]
`;

exports[` 32`] = `
box       = ["Ln", "'string'"]
canonical = [
  "Ln",
  [
    "Error",
    ["ErrorCode", "'incompatible-domain'", "Numbers", "Strings"],
    "'string'"
  ]
]
`;

exports[` 33`] = `
box       = ["Ln", 3, 4]
canonical = ["Ln", 3, ["Error", "'unexpected-argument'", 4]]
`;

exports[` 34`] = `
box       = ["Exp", 1.1]
N-auto    = 3.004166023946433
`;

exports[` 35`] = `
box       = ["Exp", 1]
canonical = ExponentialE
N-auto    = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427
N-mach    = 2.718281828459045
`;

exports[` 36`] = `
box       = ["Exp", 0]
canonical = 1
`;

exports[` 37`] = `
box       = ["Exp", -1]
canonical = ["Divide", 1, "ExponentialE"]
N-auto    = 0.36787944117144233
`;

exports[` 38`] = `
box       = ["Exp", "Pi"]
N-auto    = 23.140692632779263
`;

exports[` 39`] = `
box       = ["Exp", ["Complex", 1.1, 1.1]]
N-auto    = ["Complex", 1.3626780565806, 2.6773348713875595]
N-big     = NaN
N-cplx    = ["Complex", 1.3626780565806, 2.6773348713875595]
`;

exports[` 40`] = `
box       = ["Exp", ["List", 1.1, 2, 4]]
evaluate  = ["List", ["Exp", 1.1], ["Exp", 2], ["Exp", 4]]
N-auto    = ["List", 3.004166023946433, 7.3890560989306495, 54.59815003314423]
`;

exports[`ADD Add  1`] = `
box       = [
  "Add",
  2,
  4,
  1.5,
  1.7,
  ["Divide", 5, 7],
  ["Divide", 3, 11],
  ["Sqrt", 5],
  "Pi",
  ["Sqrt", 5],
  ["Sqrt", 4]
]
canonical = [
  "Add",
  1.5,
  1.7,
  2,
  2,
  4,
  ["Rational", 3, 11],
  ["Rational", 5, 7],
  ["Sqrt", 5],
  ["Sqrt", 5],
  "Pi"
]
simplify  = ["Add", 16.659148942012568, "Pi"]
N-auto    = 19.80074159560236
`;

exports[`ADD Add '\\frac{2}{3}+\\frac{12345678912345678}{987654321987654321}+\\frac{987654321987654321}{12345678912345678}' 1`] = `
box       = [
  "Add",
  ["Divide", 2, 3],
  ["Divide", "12345678912345678", "987654321987654321"],
  ["Divide", "987654321987654321", "12345678912345678"]
]
canonical = [
  "Add",
  ["Rational", 1371742101371742, "109739369109739369"],
  ["Rational", 2, 3],
  ["Rational", "109739369109739369", 1371742101371742]
]
simplify  = ["Rational", 252817910027517540, 3133620712618477]
N-auto    = 80.67916739555277
`;

exports[`ADD Add ['Add', 2.5, -1.1, 18.4] 1`] = `19.799999999999997`;

exports[`ADD Add ['Add', 2.5, -1.1] 1`] = `1.4`;

exports[`ADD Add ['Add', 2.5] 1`] = `2.5`;

exports[`ADD Add ['Add', 4, -1.1] 1`] = `2.9`;

exports[`ADD Add ['Add'] 1`] = `0`;

exports[`ADD Add \\frac{2}{-3222233}+\\frac{1}{3} 1`] = `
box       = ["Add", ["Divide", 2, -3222233], ["Divide", 1, 3]]
canonical = ["Subtract", ["Rational", 1, 3], ["Rational", 2, 3222233]]
simplify  = ["Rational", 3222227, 9666699]
N-auto    = 0.33333271264575426
`;

exports[`ADD Add \\sqrt{3}+2\\sqrt{3} 1`] = `["Multiply", 3, ["Sqrt", 3]]`;

exports[`ADD Add 8+\\sqrt{3} 1`] = `["Add", 8, ["Sqrt", 3]]`;

exports[`ADD Add 8.1+\\sqrt{3} 1`] = `9.832050807568876`;

exports[`CONSTANTS CatalanConstant 1`] = `
box       = CatalanConstant
N-auto    = 0.9159655941772190150546035149323841107741493742816721342664981196217630197762547694793565129261151062485744226191961995790358988033258590594315947374811584069953320287733194605190387274781640878659090247064841521630002287276409423882599577415088163974702524820115607076448838078733704899008647751132259971343407485407553230768565335768095835260219382323950800720680355761048235733942319149829836189977069036404180862179411019175327431499782339761055122477953032487537187866582808236057022559419481809753509711315712615804242723636439850017382875977976530683700929808738874956108936597719409687268444416680462162433986483891628044828150627302274207388431172218272190472255870531908685735423498539498309919115967388464508615152499624237043745177737235177544070853846440132174839299994757244619975496197587064007474870701490937678873045869979860644874974643872062385137123927363049985035392239287879790633644032354784535851927777787270906083031994301332316712476158709792455479119092126201854803963934243
N-mach    = 0.915965594177219
`;

exports[`CONSTANTS EulerGamma 1`] = `
box       = EulerGamma
N-auto    = 0.57721566490153286060651209008240243104215933593992359880576723488486772677766467093694706329174674951463144724980708248096050401448654283622417399764492353625350033374293733773767394279259525824709491600873520394816567085323315177661152862119950150798479374508570574002992135478614669402960432542151905877553526733139925401296742051375413954911168510280798423487758720503843109399736137255306088933126760017247953783675927135157722610273492913940798430103417771778088154957066107501016191663340152278935867965497252036212879226555953669628176388792726801324310104765059637039473949576389065729679296010090151251959509222435014093498712282479497471956469763185066761290638110518241974448678363808617494551698927923018773910729457815543160050021828440960537724342032854783670151773943987003023703395183286900015581939880427074115422278197165230110735658339673
N-mach    = 0.5772156649015329
`;

exports[`CONSTANTS ExponentialE 1`] = `
box       = ExponentialE
N-auto    = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427
N-mach    = 2.718281828459045
`;

exports[`CONSTANTS GoldenRatio 1`] = `
box       = GoldenRatio
simplify  = ["Add", ["Divide", ["Sqrt", 5], 2], "Half"]
evaluate  = ["Divide", ["Add", 1, ["Sqrt", 5]], 2]
N-auto    = 1.618033988749895
`;

exports[`CONSTANTS ImaginaryUnit 1`] = `
box       = ImaginaryUnit
evaluate  = ["Complex", 0, 1]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 0, 1]
`;

exports[`CONSTANTS MachineEpsilon 1`] = `
box       = MachineEpsilon
N-auto    = 2.220446049250313e-16
`;

exports[`DIVIDE Divide (1/5)/7 1`] = `["Rational", 1, 35]`;

exports[`DIVIDE Divide 2.5/1.1 1`] = `2.2727272727272725`;

exports[`DIVIDE Divide 6/3 1`] = `2`;

exports[`DIVIDE Divide with many arguments 1`] = `-0.12351778656126482`;

exports[`DIVIDE Divide with single argument 1`] = `2.5`;

exports[`EXACT EVALUATION Add: All exact 1`] = `
box       = ["Add", 6, ["Divide", 10, 14], ["Sqrt", ["Divide", 18, 9]]]
canonical = ["Add", 6, ["Rational", 5, 7], ["Sqrt", 2]]
simplify  = ["Add", ["Rational", 47, 7], ["Sqrt", 2]]
N-auto    = 8.12849927665881
`;

exports[`EXACT EVALUATION Add: All exact 2`] = `
box       = ["Add", 6, ["Sqrt", 2], ["Sqrt", 5]]
N-auto    = 9.650281539872886
`;

exports[`EXACT EVALUATION Add: All exact 3`] = `
box       = ["Add", 2, 5, ["Divide", 5, 7], ["Divide", 7, 9], ["Sqrt", 2], "Pi"]
canonical = [
  "Add",
  2,
  5,
  ["Rational", 5, 7],
  ["Rational", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
simplify  = ["Add", ["Rational", 535, 63], ["Sqrt", 2], "Pi"]
N-auto    = 13.04786970802638
`;

exports[`EXACT EVALUATION Add: one inexact 1`] = `
box       = [
  "Add",
  1.1,
  2,
  5,
  ["Divide", 5, 7],
  ["Divide", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
canonical = [
  "Add",
  1.1,
  2,
  5,
  ["Rational", 5, 7],
  ["Rational", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
simplify  = ["Add", 11.006277054436588, "Pi"]
N-auto    = 14.14786970802638
`;

exports[`EXACT EVALUATION Canceled inexact values are ignored 1`] = `
box       = [
  "Add",
  2.12,
  -2.12,
  ["Divide", 1, 4],
  ["Divide", 1, 4],
  ["Sqrt", 5],
  ["Sqrt", 7]
]
canonical = [
  "Add",
  -2.12,
  2.12,
  ["Rational", 1, 4],
  ["Rational", 1, 4],
  ["Sqrt", 5],
  ["Sqrt", 7]
]
simplify  = ["Add", "Half", ["Sqrt", 5], ["Sqrt", 7]]
N-auto    = 5.3818192885643805
`;

exports[`EXACT EVALUATION Cos: Exact integer 1`] = `
box       = ["Cos", 5]
N-auto    = 0.2836621854632262644666391715135573083344225922522159449303590665861514567673827022861769816683445732
N-mach    = 0.28366218546322625
`;

exports[`EXACT EVALUATION Cos: Exact rational 1`] = `
box       = ["Cos", ["Divide", 5, 7]]
canonical = ["Cos", ["Rational", 5, 7]]
N-auto    = 0.7555613467006965984683946089685341053573578298049479364530583959373532454616556294641781466762965047
N-mach    = 0.7555613467006966
`;

exports[`EXACT EVALUATION Cos: Inexact Fractional part 1`] = `
box       = ["Cos", 5.1]
evaluate  = 0.3779777427129805633205755529289816708986415761342775705417669130109508932516094406258976828813925437
eval-mach = 0.37797774271298024
`;

exports[`EXACT EVALUATION Cos: Pi (simplify constructible value) 1`] = `
box       = ["Cos", "Pi"]
simplify  = -1
`;

exports[`EXACT EVALUATION Exact values are grouped together 1`] = `
box       = [
  "Add",
  2,
  ["Divide", 1, 4],
  ["Divide", 1, 4],
  ["Sqrt", 5],
  ["Sqrt", 7]
]
canonical = [
  "Add",
  2,
  ["Rational", 1, 4],
  ["Rational", 1, 4],
  ["Sqrt", 5],
  ["Sqrt", 7]
]
simplify  = ["Add", ["Rational", 5, 2], ["Sqrt", 5], ["Sqrt", 7]]
N-auto    = 7.3818192885643805
`;

exports[`EXACT EVALUATION Inexact values propagate 1`] = `
box       = ["Add", 0.1, 2, ["Divide", 1, 4]]
canonical = ["Add", 0.1, 2, ["Rational", 1, 4]]
simplify  = 2.35
`;

exports[`EXACT EVALUATION Sqrt: Exact integer 1`] = `
box       = ["Sqrt", 5]
N-auto    = 2.23606797749979
`;

exports[`EXACT EVALUATION Sqrt: Exact rational 1`] = `
box       = ["Sqrt", ["Divide", 5, 7]]
canonical = ["Divide", ["Sqrt", 35], 7]
N-auto    = 0.8451542547285166
`;

exports[`EXACT EVALUATION Sqrt: Inexact Fractional part 1`] = `
box       = ["Sqrt", 5.1]
canonical = 2.258317958127243
`;

exports[`EXACT EVALUATION Square rationals are grouped together 1`] = `
box       = ["Add", ["Sqrt", 5], ["Sqrt", 5]]
simplify  = ["Multiply", 2, ["Sqrt", 5]]
N-auto    = 4.47213595499958
`;

exports[`INVALID NEGATE INVALID Negate 1`] = `["Negate", 2.5, ["Error", "'unexpected-argument'", 1.1]]`;

exports[`INVALID NEGATE INVALID Negate 2`] = `
[
  "Negate",
  2.5,
  ["Error", "'unexpected-argument'", -1.1],
  ["Error", "'unexpected-argument'", 18.4]
]
`;

exports[`INVALID ROOT Too few args 1`] = `["Root", 2.5, ["Error", "'missing'"]]`;

exports[`INVALID ROOT Too many args 1`] = `["Root", 2.5, -1.1, ["Error", "'unexpected-argument'", 18.4]]`;

exports[`MULTIPLY 2x(-2/3) 1`] = `
box       = ["Multiply", 2, ["Rational", -2, 3]]
canonical = ["Multiply", -2, ["Rational", 2, 3]]
simplify  = ["Rational", -4, 3]
N-auto    = -1.3333333333333333
`;

exports[`MULTIPLY 2x(1+1.1i) 1`] = `
box       = ["Multiply", 2, ["Complex", 1, 1.1]]
simplify  = ["Complex", 2, 2.2]
evaluate  = ["Complex", 2, 2.2]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 2, 2.2]
`;

exports[`MULTIPLY 2x(1+i) 1`] = `
box       = ["Multiply", 2, ["Complex", 1, 1]]
simplify  = ["Complex", 2, 2]
evaluate  = ["Complex", 2, 2]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 2, 2]
`;

exports[`MULTIPLY 2x(1.1+1.1i) 1`] = `
box       = ["Multiply", 2, ["Complex", 1.1, 1.1]]
simplify  = ["Complex", 2.2, 2.2]
evaluate  = ["Complex", 2.2, 2.2]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 2.2, 2.2]
`;

exports[`MULTIPLY 2x(1.1+i) 1`] = `
box       = ["Multiply", 2, ["Complex", 1.1, 1]]
simplify  = ["Complex", 2.2, 2]
evaluate  = ["Complex", 2.2, 2]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 2.2, 2]
`;

exports[`MULTIPLY 2x(1.1i) 1`] = `
box       = ["Multiply", 2, ["Complex", 0, 1.1]]
simplify  = ["Complex", 0, 2.2]
evaluate  = ["Complex", 0, 2.2]
eval-big  = NaN
eval-mach = NaN
eval-cplx = ["Complex", 0, 2.2]
`;

exports[`MULTIPLY 2x(2/3) 1`] = `
box       = ["Multiply", 2, ["Rational", 2, 3]]
simplify  = ["Rational", 4, 3]
N-auto    = 1.3333333333333333
`;

exports[`MULTIPLY 2x(1234567890987654321/3) 1`] = `
box       = ["Multiply", 2, ["Rational", "1234567890987654321", 3]]
canonical = ["Multiply", 2, "411522630329218107"]
simplify  = 823045260658436200
`;

exports[`MULTIPLY 2x-1234567890987654321.123456789 1`] = `
box       = ["Multiply", 2, "1234567890987654321.123456789"]
simplify  = 2469135781975309000
`;

exports[`MULTIPLY 2x1234567890987654321 1`] = `
box       = ["Multiply", 2, "1234567890987654321"]
simplify  = 2469135781975309000
`;

exports[`MULTIPLY 5x(-2.1) 1`] = `
box       = ["Multiply", 5, -2.1]
canonical = ["Multiply", -5, 2.1]
simplify  = -10.5
`;

exports[`MULTIPLY 5x2 1`] = `
box       = ["Multiply", 5, 2]
canonical = ["Multiply", 2, 5]
simplify  = 10
`;

exports[`MULTIPLY Multiply 1`] = `
box       = ["Multiply", 2.5]
canonical = 2.5
`;

exports[`MULTIPLY Multiply 2`] = `
box       = ["Multiply", 2.5, 1.1]
canonical = ["Multiply", 1.1, 2.5]
simplify  = 2.75
`;

exports[`MULTIPLY Multiply 3`] = `
box       = ["Multiply", 2.5, -1.1, 18.4]
canonical = ["Multiply", -2.5, 1.1, 18.4]
simplify  = -50.599999999999994
`;

exports[`MULTIPLY Multiply: All exact 1`] = `
box       = [
  "InvisibleOperator",
  2,
  ["Multiply", ["Divide", 5, 7], ["Divide", 7, 9]]
]
canonical = ["Multiply", 2, ["Rational", 5, 7], ["Rational", 7, 9]]
simplify  = ["Rational", 10, 9]
N-auto    = 1.1111111111111112
`;

exports[`MULTIPLY Multiply: All exact with symbol 1`] = `
box       = [
  "Multiply",
  2,
  5,
  ["Divide", 5, 7],
  ["Divide", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
canonical = [
  "Multiply",
  2,
  5,
  ["Rational", 5, 7],
  ["Rational", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
simplify  = ["Divide", ["Multiply", 50, ["Sqrt", 2], "Pi"], 9]
evaluate  = ["Multiply", "Pi", ["Divide", ["Multiply", 50, ["Sqrt", 2]], 9]]
N-auto    = 24.6826829897687
`;

exports[`MULTIPLY Multiply: One inexact 1`] = `
box       = [
  "Multiply",
  1.1,
  2,
  5,
  ["Divide", 5, 7],
  ["Divide", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
canonical = [
  "Multiply",
  1.1,
  2,
  5,
  ["Rational", 5, 7],
  ["Rational", 7, 9],
  ["Sqrt", 2],
  "Pi"
]
simplify  = ["Multiply", 8.64241621450225, "Pi"]
N-auto    = 27.150951288745574
`;

exports[`MULTIPLY with +Infinity 1`] = `
box       = ["Multiply", "x", -2, 3.1, "PositiveInfinity"]
canonical = ["Multiply", -2, 3.1, "PositiveInfinity", "x"]
simplify  = PositiveInfinity
`;

exports[`MULTIPLY with <0 1`] = `
box       = ["Multiply", "x", -2, 3.1, -5.2]
canonical = ["Multiply", 2, 3.1, 5.2, "x"]
simplify  = ["Multiply", 32.24, "x"]
`;

exports[`MULTIPLY with -Infinity 1`] = `
box       = ["Multiply", "x", -2, 3.1, "NegativeInfinity", "NegativeInfinity"]
canonical = ["Multiply", -2, 3.1, "PositiveInfinity", "PositiveInfinity", "x"]
simplify  = PositiveInfinity
`;

exports[`MULTIPLY with -Infinity and +Infinity 1`] = `
box       = [
  "Multiply",
  "x",
  -2,
  3.1,
  "PositiveInfinity",
  "NegativeInfinity",
  "PositiveInfinity"
]
canonical = [
  "Multiply",
  2,
  3.1,
  "PositiveInfinity",
  "PositiveInfinity",
  "PositiveInfinity",
  "x"
]
simplify  = PositiveInfinity
`;

exports[`MULTIPLY with NaN 1`] = `
box       = ["Multiply", "x", 2, 3.1, "NaN"]
canonical = ["Multiply", 3.1, "NaN", 2, "x"]
simplify  = NaN
`;

exports[`MULTIPLY with Nan, -Infinity and +Infinity 1`] = `
box       = [
  "Multiply",
  "x",
  -2,
  3.1,
  "NaN",
  "NegativeInfinity",
  "PositiveInfinity"
]
canonical = [
  "Multiply",
  3.1,
  "NaN",
  2,
  "PositiveInfinity",
  "PositiveInfinity",
  "x"
]
simplify  = NaN
`;

exports[`MULTIPLY with zero 1`] = `
box       = ["Multiply", "x", 2, 3.1, 0]
canonical = ["Multiply", 0, 2, 3.1, "x"]
simplify  = 0
`;

exports[`Max Max 1`] = `
box       = ["Max", 2.5]
simplify  = 2.5
`;

exports[`Max Max 2`] = `
box       = ["Max", 2.5, 1.1]
evaluate  = 2.5
`;

exports[`Max Max 3`] = `
box       = ["Max", 2.5, -1.1, 18.4]
evaluate  = 18.4
`;

exports[`Max Max 4`] = `
box       = ["Max", 2.5, -1.1, "NaN", 18.4]
evaluate  = 18.4
`;

exports[`Max Max 5`] = `
box       = ["Max", 2.5, -1.1, "foo", 18.4]
evaluate  = ["Max", 18.4, "foo"]
`;

exports[`Max Max 6`] = `["Max", "foo", "bar"]`;

exports[`Min Min 1`] = `
box       = ["Min", 2.5]
simplify  = 2.5
`;

exports[`Min Min 2`] = `
box       = ["Min", 2.5, 1.1]
evaluate  = 1.1
`;

exports[`Min Min 3`] = `
box       = ["Min", 2.5, -1.1, 18.4]
evaluate  = -1.1
`;

exports[`Min Min 4`] = `
box       = ["Min", 2.5, -1.1, "NaN", 18.4]
evaluate  = -1.1
`;

exports[`Min Min 5`] = `
box       = ["Min", 2.5, -1.1, "foo", 18.4]
evaluate  = ["Min", -1.1, "foo"]
`;

exports[`Min Min 6`] = `["Min", "foo", "bar"]`;

exports[`NEGATE -(+Infinity) 1`] = `NegativeInfinity`;

exports[`NEGATE -(-2.1) 1`] = `2`;

exports[`NEGATE -(-2/3) 1`] = `
box       = ["Negate", ["Rational", -2, 3]]
canonical = ["Rational", 2, 3]
N-auto    = 0.(6)
N-mach    = 0.6666666666666666
`;

exports[`NEGATE -(-Infinity) 1`] = `PositiveInfinity`;

exports[`NEGATE -(1+1.1i) 1`] = `
box       = ["Negate", ["Complex", 1, 1.1]]
canonical = ["Complex", -1, -1.1]
`;

exports[`NEGATE -(1+i) 1`] = `
box       = ["Negate", ["Complex", 1, 1]]
canonical = ["Complex", -1, -1]
`;

exports[`NEGATE -(1.1+1.1i) 1`] = `
box       = ["Negate", ["Complex", 1.1, 1.1]]
canonical = ["Complex", -1.1, -1.1]
`;

exports[`NEGATE -(1.1+i) 1`] = `
box       = ["Negate", ["Complex", 1.1, 1]]
canonical = ["Complex", -1.1, -1]
`;

exports[`NEGATE -(1.1i) 1`] = `
box       = ["Negate", ["Complex", 0, 1.1]]
canonical = ["Complex", 0, -1.1]
`;

exports[`NEGATE -(2/3) 1`] = `
box       = ["Negate", ["Rational", 2, 3]]
canonical = ["Rational", -2, 3]
N-auto    = -0.(6)
N-mach    = -0.6666666666666666
`;

exports[`NEGATE -(1234567890987654321/3) 1`] = `
box       = ["Negate", ["Rational", "1234567890987654321", 3]]
canonical = -411522630329218107
`;

exports[`NEGATE -0 1`] = `0`;

exports[`NEGATE -2 1`] = `-2`;

exports[`NEGATE -2.5 1`] = `-2.5`;

exports[`NEGATE -1234567890987654321 1`] = `-1234567890987654321`;

exports[`NEGATE -1234567890987654321.123456789 1`] = `-1234567890987654321.123456789`;

exports[`NEGATE -NaN 1`] = `NaN`;

exports[`POWER INVALID Power 1`] = `["Power", 2.5, ["Error", "'missing'"]]`;

exports[`POWER INVALID Power 2`] = `["Power", 2.5, -1.1, ["Error", "'unexpected-argument'", 18.4]]`;

exports[`POWER Power 1`] = `2.7398955659630433`;

exports[`POWER Power 2`] = `0.064`;

exports[`POWER Power 3`] = `0.05328340527371987`;

exports[`RATIONAL Bignum rational 1`] = `
box       = ["Rational", "12345678901234567890", "23456789012345678901"]
canonical = ["Rational", 137174210, 260630989]
N-auto    = 0.5263158096675909862737005536973962831411425139471807015243302476207079120587613624103617241002757351
N-mach    = 0.526315809667591
`;

exports[`RATIONAL INVALID Rational 1`] = `
box       = ["Rational", 2.5, -1.1, 18.4]
canonical = [
  "Rational",
  [
    "Error",
    [
      "ErrorCode",
      "'incompatible-domain'",
      "Integers",
      "PositiveNumbers"
    ],
    2.5
  ],
  [
    "Error",
    [
      "ErrorCode",
      "'incompatible-domain'",
      "Integers",
      "NegativeNumbers"
    ],
    -1.1
  ],
  ["Error", "'unexpected-argument'", 18.4]
]
`;

exports[`RATIONAL INVALID Rational 2`] = `
box       = ["Rational", 2, 3, 5]
canonical = ["Rational", 2, 3, ["Error", "'unexpected-argument'", 5]]
`;

exports[`RATIONAL Rational 1`] = `
box       = ["Rational", 3, 4]
N-auto    = 0.75
`;

exports[`RATIONAL Rational approximation 1`] = `
box       = ["Rational", 2.5]
evaluate  = ["Rational", 5, 2]
N-auto    = 2.5
`;

exports[`RATIONAL Rational approximation 2`] = `
box       = ["Rational", "Pi"]
evaluate  = ["Rational", 80143857, 25510582]
N-auto    = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068
N-mach    = 3.141592653589793
`;

exports[`RATIONAL Rational as Divide 1`] = `
box       = ["Rational", 3.1, 2.8]
canonical = 1.1071428571428572
`;

exports[`RELATIONAL OPERATOR Equal 1`] = `True`;

exports[`RELATIONAL OPERATOR Equal 2`] = `False`;

exports[`RELATIONAL OPERATOR Greater 1`] = `False`;

exports[`RELATIONAL OPERATOR Greater 2`] = `True`;

exports[`RELATIONAL OPERATOR GreaterEqual 1`] = `True`;

exports[`RELATIONAL OPERATOR GreaterEqual 2`] = `False`;

exports[`RELATIONAL OPERATOR GreaterEqual 3`] = `True`;

exports[`RELATIONAL OPERATOR Less 1`] = `True`;

exports[`RELATIONAL OPERATOR Less 2`] = `False`;

exports[`RELATIONAL OPERATOR LessEqual 1`] = `True`;

exports[`RELATIONAL OPERATOR LessEqual 2`] = `True`;

exports[`RELATIONAL OPERATOR LessEqual 3`] = `False`;

exports[`RELATIONAL OPERATOR NotEqual 1`] = `False`;

exports[`RELATIONAL OPERATOR NotEqual 2`] = `True`;

exports[`ROOT Root 2.5 1`] = `1.3572088082974534`;

exports[`ROOT Root 5/7 1`] = `0.8939035350965677`;

exports[`ROOT Root 1234567890987654321 1`] = `1072765.9799271575`;

exports[`ROOT Root 1234567890987654321.123456789 1`] = `1072765.9799271575`;

exports[`SQRT INVALID  Sqrt 1`] = `
box       = ["Sqrt", 2.5, -1.1, 18.4]
canonical = [
  "Sqrt",
  2.5,
  ["Error", "'unexpected-argument'", -1.1],
  ["Error", "'unexpected-argument'", 18.4]
]
`;

exports[`SQRT INVALID Sqrt 1`] = `
box       = ["Sqrt", 2.5, 1.1]
canonical = ["Sqrt", 2.5, ["Error", "'unexpected-argument'", 1.1]]
`;

exports[`SQRT √ of list 1`] = `[2,1,7.483314773547883,4.242640687119286]`;

exports[`SQRT √(3+4i) 1`] = `
box       = ["Sqrt", ["Complex", 3, 4]]
canonical = ["Complex", 2, 1]
`;

exports[`SQRT √(3^2) 1`] = `
box       = ["Sqrt", ["Square", 3]]
canonical = 3
`;

exports[`SQRT √(4x) 1`] = `
box       = ["Sqrt", ["Multiply", 4, "x"]]
simplify  = ["Multiply", 2, ["Sqrt", "x"]]
`;

exports[`SQRT √(5/7) 1`] = `
box       = ["Sqrt", ["Rational", 5, 7]]
canonical = ["Divide", ["Sqrt", 35], 7]
N-auto    = 0.8451542547285166
`;

exports[`SQRT √(5x(3+2)) 1`] = `
box       = ["Sqrt", ["Multiply", 5, ["Add", 3, 2]]]
canonical = ["Sqrt", ["Multiply", 5, ["Add", 2, 3]]]
simplify  = 5
`;

exports[`SQRT √(175) 1`] = `
box       = ["Sqrt", 175]
canonical = ["Multiply", 5, ["Sqrt", 7]]
N-auto    = 13.228756555322953
`;

exports[`SQRT √(1000000/49) 1`] = `
box       = ["Sqrt", ["Rational", 1000000, 49]]
canonical = ["Rational", 1000, 7]
N-auto    = 142.(857142)
N-mach    = 142.85714285714286
`;

exports[`SQRT √(1000001/7) 1`] = `
box       = ["Sqrt", ["Rational", 1000001, 7]]
canonical = ["Divide", ["Sqrt", 7000007], 7]
N-auto    = 377.9646619914165
`;

exports[`SQRT √(12345678901234567890/23456789012345678901) 1`] = `
box       = ["Sqrt", ["Rational", "12345678901234567890", "23456789012345678901"]]
canonical = ["Divide", ["Sqrt", 35751850017593690], 260630989]
N-auto    = 0.7254762640277013
`;

exports[`SQRT √(12345670000000000000000000) 1`] = `
box       = ["Sqrt", 1.234567e+25]
N-auto    = 3513640562152.0254
`;

exports[`SQRT √0 1`] = `
box       = ["Sqrt", 0]
canonical = 0
`;

exports[`SQRT √2.5 1`] = `
box       = ["Sqrt", 2.5]
canonical = 1.5811388300841898
`;

exports[`SQRT √123456789.01234567890 1`] = `
box       = ["Sqrt", "123456789.0123456789"]
canonical = 11111.11106111111
`;

exports[`SQRT √12345678901234567890 1`] = `
box       = ["Sqrt", "12345678901234567890"]
canonical = ["Sqrt", 12345678901234567000]
N-auto    = 3513641828.820144
`;

exports[`SUBTRACT Subtract 1`] = `2.5`;

exports[`SUBTRACT Subtract 2`] = `1.4`;

exports[`SUBTRACT Subtract with multiple arguments 1`] = `-14.799999999999997`;

exports[`SUBTRACT Subtract with single argument 1`] = `2.5`;

exports[`Square INVALID Square 1`] = `
box       = ["Square", 2.5, 1.1]
canonical = ["Square", 2.5, ["Error", "'unexpected-argument'", 1.1]]
`;

exports[`Square INVALID Square 2`] = `
box       = ["Square", 2.5, -1.1, 18.4]
canonical = [
  "Square",
  2.5,
  ["Error", "'unexpected-argument'", -1.1],
  ["Error", "'unexpected-argument'", 18.4]
]
`;

exports[`Square Square 1`] = `
box       = ["Square", 2.5]
simplify  = 6.25
`;
